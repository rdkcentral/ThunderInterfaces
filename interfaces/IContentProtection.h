/*
 * If not stated otherwise in this file or this component's LICENSE file the
 * following copyright and licenses apply:
 *
 * Copyright 2022 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include "Module.h"

namespace Thunder {
namespace Exchange {

    // @json 1.0.0
    struct EXTERNAL IContentProtection : virtual public Core::IUnknown {
        enum { ID = ID_CONTENTPROTECTION };

        ~IContentProtection() override = default;

        enum KeySystem : uint8_t {
            WIDEVINE /* @text:widevine */,
            PLAYREADY /* @text:playready */,
            CLEARKEY /* @text:clearkey */
        };

        enum State : uint8_t {
            ACTIVE /* @text:active */,
            INACTIVE /* @text:inactive */
        };

        // @event
        struct EXTERNAL INotification : virtual public Core::IUnknown {
            enum { ID = ID_CONTENTPROTECTION_NOTIFICATION };

            ~INotification() override = default;

            struct Status {
                enum State : uint8_t {
                    GRANTED = 1 /* @text:GRANTED */,
                    NOT_REQUIRED = 2 /* @text:NOT_REQUIRED */,
                    DENIED = 3 /* @text:DENIED */,
                    FAILED = 4 /* @text:FAILED */,
                };

                // (e.g. NOT_REQUIRED)
                State state;
                // @brief same as that returned by the SecManager.
                // For other cases greater than 20000 (e.g. 2)
                // @text failureReason
                int32_t failureReason;
            };

            // @alt onWatermarkStatusChanged
            // @param sessionId session id for the content protection session
            // (e.g. 930762523)
            // @param appId application that should receive the notification
            virtual void WatermarkStatusChanged(
                uint32_t sessionId /* @text:sessionId */,
                const string& appId /* @text:appId */,
                const Status& status)
                = 0;
        };

        virtual uint32_t Register(INotification* notification) = 0;
        virtual uint32_t Unregister(INotification* notification) = 0;

        // @alt openDrmSession
        // @param clientId client that establishes the playback session
        // (e.g. "com.comcast.vipa:1")
        // @param appId application requesting the new watermarking session
        // @param licenseRequest base64-encoded DRM license request
        // @param initData video platform specific init data
        // (e.g. "{\"sessionConfiguration\":{\"distributedTraceId\":\"...\"},\"accessToken\":\"...\",\"contentMetadata\":\"...\"}")
        // @param sessionId generated by SecManager to track sessions
        // (e.g. 930762523)
        // @param response video platform specific response data
        // (e.g. "{\"license\":\"...\",\"refreshDuration\":0}")
        // @retval 21003 Invalid key system
        // @retval 21004 Invalid license request
        // @retval 21005 Invalid content metadata
        // @retval 21006 Invalid media usage
        // @retval 21007 Invalid access token
        // @retval 21008 Invalid access attributes
        // @retval 21009 Invalid session id
        // @retval 21012 Invalid client id
        // @retval 21014 Invalid watermarking system
        // @retval 21015 Invalid content attributes
        // @retval 22001 DRM general failure
        // @retval 22003 DRM license timeout
        // @retval 22004 DRM license network failure
        // @retval 22008 DRM access token expired
        // @retval 22011 DRM MAC token not provisioned
        // @retval 22012 DRM memory allocation error
        // @retval 22013 DRM SecAPI usage failure
        // @retval 22016 DRM entitlement error
        // @retval 23001 Watermark general failure
        // @retval 23003 Watermark request timeout
        // @retval 23012 Watermark memory allocation error
        virtual uint32_t OpenDrmSession(
            const string& clientId /* @text:clientId */,
            const string& appId /* @text:appId */,
            KeySystem keySystem /* @text:keySystem */,
            const string& licenseRequest /* @text:licenseRequest */,
            const string& initData /* @text:initData */,
            uint32_t& sessionId /* @text:sessionId @out */,
            string& response /* @text:openSessionResponse @out */)
            = 0;

        // @alt setDrmSessionState
        // @param sessionId sec manager generated playback session id
        // (e.g. 930762523)
        // @retval 21009 Invalid session id
        virtual uint32_t SetDrmSessionState(
            uint32_t sessionId /* @text:sessionId */,
            State sessionState /* @text:sessionState */)
            = 0;

        // @alt updateDrmSession
        // @param sessionId sec manager generated playback session id
        // (e.g. 930762523)
        // @param licenseRequest base64-encoded DRM license request
        // @param initData video platform specific init data
        // (e.g. "{\"sessionConfiguration\":{\"distributedTraceId\":\"...\"},\"accessToken\":\"...\",\"contentMetadata\":\"...\"}")
        // @param response video platform specific response data
        // (e.g. "{\"license\":\"...\",\"refreshDuration\":0}")
        // @retval 21003 Invalid key system
        // @retval 21004 Invalid license request
        // @retval 21005 Invalid content metadata
        // @retval 21006 Invalid media usage
        // @retval 21007 Invalid access token
        // @retval 21008 Invalid access attributes
        // @retval 21009 Invalid session id
        // @retval 21012 Invalid client id
        // @retval 21014 Invalid watermarking system
        // @retval 21015 Invalid content attributes
        // @retval 22001 DRM general failure
        // @retval 22003 DRM license timeout
        // @retval 22004 DRM license network failure
        // @retval 22008 DRM access token expired
        // @retval 22011 DRM MAC token not provisioned
        // @retval 22012 DRM memory allocation error
        // @retval 22013 DRM SecAPI usage failure
        // @retval 22016 DRM entitlement error
        // @retval 23001 Watermark general failure
        // @retval 23003 Watermark request timeout
        // @retval 23012 Watermark memory allocation error
        virtual uint32_t UpdateDrmSession(
            uint32_t sessionId /* @text:sessionId */,
            const string& licenseRequest /* @text:licenseRequest */,
            const string& initData /* @text:initData */,
            string& response /* @text:updateSessionResponse @out */)
            = 0;

        // @alt closeDrmSession
        // @param sessionId sec manager generated playback session id
        // (e.g. 930762523)
        // @param response video platform specific response data
        // @retval 21009 Invalid session id
        // @retval 21012 Invalid client id
        virtual uint32_t CloseDrmSession(
            uint32_t sessionId /* @text:sessionId */,
            string& response /* @text:closeSessionResponse @out */)
            = 0;

        // @alt showWatermark
        // @param sessionId id returned on a call to openDrmSession
        // (e.g. 930762523)
        // @param show true when watermark has to be presented
        virtual uint32_t ShowWatermark(
            uint32_t sessionId /* @text:sessionId */,
            bool show,
            const uint8_t opacityLevel /* @text:opacityLevel @restrict:0..100 */)
            = 0;

        // @alt setPlaybackPosition
        // @param sessionId sec manager generated playback session id
        // (e.g. 930762523)
        // @param speed current playback speed
        // @param position current playback position
        virtual uint32_t SetPlaybackPosition(
            uint32_t sessionId /* @text:sessionId */,
            int32_t speed, long position)
            = 0;
    };

} // namespace Exchange
} // namespace Thunder
